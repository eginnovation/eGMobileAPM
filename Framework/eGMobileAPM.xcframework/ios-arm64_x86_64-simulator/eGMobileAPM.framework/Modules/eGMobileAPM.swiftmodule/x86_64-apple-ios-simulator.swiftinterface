// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name eGMobileAPM
import SystemConfiguration.CaptiveNetwork
import CoreTelephony
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
@_exported import eGMobileAPM
public enum DeviceEvent {
  case lifecycle
  case network
  public static func == (a: eGMobileAPM.DeviceEvent, b: eGMobileAPM.DeviceEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public var userInfoDict: [Swift.String : Any]
@_inheritsConvenienceInitializers @objc open class egAPM : ObjectiveC.NSObject {
  @objc open class func sharedInstance() -> eGMobileAPM.egAPM
  @objc open func start(apptoken: Swift.String)
  @objc open func start(apptoken: Swift.String, collectorHost: Swift.String)
  @objc open func disableCrash()
  @objc open func enableCrash()
  @objc open func disableHTTP()
  @objc open func enableHTTP()
  @objc open func disableTrace()
  @objc open func enableTrace()
  @objc open func disableUI()
  @objc open func enableUI()
  @objc open func stop()
  @objc open func userCountry() -> Swift.String
  @objc open func osVersion() -> Swift.String
  @objc open func deviceName() -> Swift.String
  @objc open func appName() -> Swift.String
  @objc open func appInfo() -> Swift.String
  @objc open func devInfo() -> Swift.String
  @objc open func resInfo() -> Swift.String
  @objc open func userInfo() -> Swift.String
  @objc open func getViewController() -> Swift.String
  @discardableResult
  @objc open func setUserName(_ value: Swift.String) -> Swift.Bool
  @discardableResult
  @objc open func setAttribute(_ name: Swift.String, _ value: Any) -> Swift.Bool
  @objc open func setCachePolicy(_ policy: Foundation.URLCache.StoragePolicy)
  @objc open func show()
  @objc open func hide()
  @objc open func ignoreURL(_ url: Swift.String)
  @objc open func saveCrashDetails(exception: Foundation.NSException)
  @objc open func networkOperationNSURLConnection(content: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension UIImage {
  @objc convenience dynamic public init(contentsOfFile1: Swift.String)
  @objc convenience dynamic public init(data1: Foundation.Data)
  @objc convenience dynamic public init(data1: Foundation.Data, scale1: CoreGraphics.CGFloat)
}
extension UITableView {
  @objc dynamic open func newViewTouchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc dynamic open func newViewTouchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
extension UICollectionView {
  @objc dynamic open func newViewTouchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc dynamic open func newViewTouchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
extension UITableView {
  @objc dynamic open func nsh_set(delegate: UIKit.UITableViewDelegate?)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension UICollectionView {
  @objc dynamic open func nsh_set(delegate: UIKit.UICollectionViewDelegate?)
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers public class ApplicationInfoModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserInfoModel {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class egProtocol : Foundation.URLProtocol {
  @objc override dynamic open class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic open class func canInit(with task: Foundation.URLSessionTask) -> Swift.Bool
  @objc override dynamic open func startLoading()
  @objc override dynamic open func stopLoading()
  @objc override dynamic open class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc deinit
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: Foundation.URLProtocolClient?)
}
extension egProtocol : Foundation.URLSessionDelegate, Foundation.URLSessionDataDelegate, Foundation.URLSessionTaskDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
@_hasMissingDesignatedInitializers public class ResourceInfoModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceInfoModel {
  @objc deinit
}
extension UIDevice {
  public static let modelName: Swift.String
  public func getIPAddress() -> Swift.String?
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (eGMobileAPM.Reachability) -> ()
  public typealias NetworkUnreachable = (eGMobileAPM.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: eGMobileAPM.Reachability.NetworkStatus, b: eGMobileAPM.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: eGMobileAPM.Reachability.Connection, b: eGMobileAPM.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: eGMobileAPM.Reachability.NetworkReachable?
  public var whenUnreachable: eGMobileAPM.Reachability.NetworkUnreachable?
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: eGMobileAPM.Reachability.Connection {
    get
  }
  public var connection: eGMobileAPM.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class egHTTPModel : ObjectiveC.NSObject {
  @objc public var requestURL: Swift.String?
  @objc public var requestMethod: Swift.String?
  @objc public var requestCachePolicy: Swift.String?
  @objc public var requestDate: Foundation.Date?
  @objc public var requestDateinMills: Swift.String?
  @objc public var requestTime: Swift.String?
  @objc public var requestTimeout: Swift.String?
  @objc public var requestHeaders: [Swift.AnyHashable : Any]?
  public var requestBodyLength: Swift.Int?
  @objc public var requestType: Swift.String?
  public var responseStatus: Swift.Int?
  @objc public var responseType: Swift.String?
  @objc public var responseDate: Foundation.Date?
  @objc public var responseDateinmills: Swift.String?
  @objc public var responseTime: Swift.String?
  @objc public var responseHeaders: [Swift.AnyHashable : Any]?
  public var responseBodyLength: Swift.Int?
  public var timeInterval: Swift.Float?
  @objc public var randomHash: Foundation.NSString?
  @objc public var shortType: Foundation.NSString
  @objc public var noResponse: Swift.Bool
  @objc deinit
  @objc public func getRequestBody() -> Foundation.NSString
  @objc public func getResponseBody() -> Foundation.NSString
  @objc public func getRandomHash() -> Foundation.NSString
  @objc public func getRequestBodyFilepath() -> Swift.String
  @objc public func getRequestBodyFilename() -> Swift.String
  @objc public func getResponseBodyFilepath() -> Swift.String
  @objc public func getResponseBodyFilename() -> Swift.String
  @objc public func getDocumentsPath() -> Swift.String
  @objc public func saveData(_ dataString: Foundation.NSString, toFile: Swift.String)
  @objc public func readRawData(_ fromFile: Swift.String) -> Foundation.Data?
  @objc public func getTimeFromDate(_ date: Foundation.Date) -> Swift.String?
  public func getShortTypeFrom(_ contentType: Swift.String) -> eGMobileAPM.HTTPModelShortType
  public func prettyPrint(_ rawData: Foundation.Data, type: eGMobileAPM.HTTPModelShortType) -> Foundation.NSString?
  @objc public func isSuccessful() -> Swift.Bool
  @objc public func formattedRequestLogEntry() -> Swift.String
  @objc public func formattedResponseLogEntry() -> Swift.String
  @objc override dynamic public init()
}
public enum HTTPModelShortType : Swift.String {
  case JSON
  case XML
  case HTML
  case IMAGE
  case OTHER
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension eGMobileAPM.DeviceEvent : Swift.Equatable {}
extension eGMobileAPM.DeviceEvent : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension eGMobileAPM.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension eGMobileAPM.Reachability.NetworkStatus : Swift.Hashable {}
extension eGMobileAPM.Reachability.Connection : Swift.Equatable {}
extension eGMobileAPM.Reachability.Connection : Swift.Hashable {}
extension eGMobileAPM.HTTPModelShortType : Swift.Equatable {}
extension eGMobileAPM.HTTPModelShortType : Swift.Hashable {}
extension eGMobileAPM.HTTPModelShortType : Swift.RawRepresentable {}
